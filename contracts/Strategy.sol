// SPDX-License-Identifier: AGPL-3.0
// Feel free to change the license, but this is what we use

// Feel free to change this version of Solidity. We support >=0.6.0 <0.7.0;
pragma solidity 0.6.12;
pragma experimental ABIEncoderV2;

// These are the core Yearn libraries

import {
    SafeERC20,
    SafeMath,
    IERC20,
    Address
} from "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";

import {BaseStrategy, StrategyParams} from "./BaseStrategy.sol";

// Import interfaces for many popular DeFi projects, or add your own!
// import "../interfaces/<protocol>/<Interface>.sol";
import "./interfaces/pickle/PickleJar.sol";
import "./interfaces/pickle/PickleFarm.sol";
import "./interfaces/sushi/SushiRouter.sol";

contract Strategy is BaseStrategy {
    using SafeERC20 for IERC20;
    using Address for address;
    using SafeMath for uint256;

    address public constant daiPickleJar = address(0x0519848e57Ba0469AA5275283ec0712c91e20D8E);
    address public constant pickleFarm = address(0x20B2a3fc7B13cA0cCf7AF81A68a14CB3116E8749);
    address public constant pickleToken = address(0x2b88aD57897A8b496595925F43048301C37615Da);
    address public constant sushiRouter = address(0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506);
    uint256 public constant picklePID = 3;

    constructor(address _vault) public BaseStrategy(_vault) {
        // You can set these parameters on deployment to whatever you want
        // maxReportDelay = 6300;
        // profitFactor = 100;
        // debtThreshold = 0;
        SafeERC20.safeApprove(want, daiPickleJar, uint256(-1)); // Give pickleJar unlimited access
        SafeERC20.safeApprove(IERC20(daiPickleJar), pickleFarm, uint256(-1)); // Give pickleFarm unlimited access
        SafeERC20.safeApprove(IERC20(pickleToken), sushiRouter, uint256(-1)); // Give sushi unlimited access to pickle
    }

    function sellPickle() internal returns (uint256) {
        (, int256 pickleToHarvest) = PickleFarm(pickleFarm).userInfo(picklePID, address(this));
        if (pickleToHarvest > 0 ) {

            uint256 oldWant = want.balanceOf(address(this));
            PickleFarm(pickleFarm).harvest(picklePID, address(this));

            address[] memory path = new address[](2);
            path[0] = pickleToken;
            path[1] = address(want);
            SushiRouter(sushiRouter).swapExactTokensForTokens(
                IERC20(pickleToken).balanceOf(address(this)),
                uint256(0),
                path,
                address(this),
                now.add(2500)
            );
            return want.balanceOf(address(this)) - oldWant;
        } else return 0;
    }


    // ******** OVERRIDE THESE METHODS FROM BASE CONTRACT ************

    function name() external view override returns (string memory) {
        // Add your own name here, suggestion e.g. "StrategyCreamYFI"
        return "StrategyPickleDAI";
    }

    function estimatedTotalAssets() public view override returns (uint256) {
        // TODO: Build a more accurate estimate using the value of all positions in terms of `want`
        address[] memory path = new address[](2);
            path[0] = pickleToken;
            path[1] = address(want);

        (uint256 stakedShares, int256 pickleToHarvest) = PickleFarm(pickleFarm).userInfo(picklePID, address(this));
        if (pickleToHarvest < 0 ) pickleToHarvest = 0 ;

        uint256 inPickle = uint256(pickleToHarvest) + IERC20(pickleToken).balanceOf(address(this));
        uint256 inShares = stakedShares + IERC20(daiPickleJar).balanceOf(address(this));
        return
            want.balanceOf(address(this))
            .add(
                inShares.mul(PickleJar(daiPickleJar).balance()).div(PickleJar(daiPickleJar).totalSupply())
            )
            .add(
                inPickle > 0 ? SushiRouter(sushiRouter).getAmountsOut(inPickle, path)[1] : 0
            );
    }

    function prepareReturn(uint256 _debtOutstanding)
        internal
        override
        returns (
            uint256 _profit,
            uint256 _loss,
            uint256 _debtPayment
        )
    {
        // TODO: Do stuff here to free up any returns back into `want`
        // NOTE: Return `_profit` which is value generated by all positions, priced in `want`
        // NOTE: Should try to free up at least `_debtOutstanding` of underlying position
        uint256 profit = sellPickle();

        if ((estimatedTotalAssets().sub(_debtOutstanding)) >= 0) {
            _profit = profit;
            _loss = 0;
            _debtPayment = 0;
        } else {
            _profit = 0;
            _loss = _debtOutstanding.sub(estimatedTotalAssets());
            _debtPayment = 0;
        }
    }

    function adjustPosition(uint256 _debtOutstanding) internal override {
        // TODO: Do something to invest excess `want` tokens (from the Vault) into your positions
        // NOTE: Try to adjust positions so that `_debtOutstanding` can be freed up on *next* harvest (not immediately)
        PickleJar(daiPickleJar).depositAll();
        PickleFarm(pickleFarm).deposit( picklePID, IERC20(daiPickleJar).balanceOf(address(this)), address(this));
    }

    function liquidatePosition(uint256 _amountNeeded) internal override returns (uint256 _liquidatedAmount, uint256 _loss) {
        // TODO: Do stuff here to free up to `_amountNeeded` from all positions back into `want`
        // NOTE: Maintain invariant `want.balanceOf(this) >= _liquidatedAmount`
        // NOTE: Maintain invariant `_liquidatedAmount + _loss <= _amountNeeded`

        uint256 sharesToWithdraw = 0;
        sellPickle();

        if (_amountNeeded > want.balanceOf(address(this))) {
            sharesToWithdraw = (_amountNeeded - want.balanceOf(address(this))).mul(PickleJar(daiPickleJar).totalSupply()).div(
                PickleJar(daiPickleJar).balance()
            );
        }

        (uint256 stakedShares,) = PickleFarm(pickleFarm).userInfo(picklePID, address(this));
        

        if (sharesToWithdraw > stakedShares) {
            PickleFarm(pickleFarm).withdraw( picklePID, stakedShares, address(this));
            PickleJar(daiPickleJar).withdrawAll();
            uint256 totalAssets = want.balanceOf(address(this));
            _liquidatedAmount = totalAssets;
            _loss = _amountNeeded.sub(totalAssets);
        } else if (sharesToWithdraw > 0) {
            PickleFarm(pickleFarm).withdraw( picklePID, sharesToWithdraw, address(this));
            PickleJar(daiPickleJar).withdraw(sharesToWithdraw);
            uint256 totalAssets = want.balanceOf(address(this));
            _liquidatedAmount = totalAssets;
        } else {
            _liquidatedAmount = _amountNeeded;
        }
    }

    function liquidateAllPositions() internal override returns (uint256) {
        // TODO: Liquidate all positions and return the amount freed.
        sellPickle();
        (uint256 stakedShares,) = PickleFarm(pickleFarm).userInfo(picklePID, address(this));
        PickleFarm(pickleFarm).withdraw( picklePID, stakedShares, address(this));
        PickleJar(daiPickleJar).withdrawAll();
        return want.balanceOf(address(this));
    }

    // NOTE: Can override `tendTrigger` and `harvestTrigger` if necessary

    function prepareMigration(address _newStrategy) internal override {
        // TODO: Transfer any non-`want` tokens to the new strategy
        // NOTE: `migrate` will automatically forward all `want` in this strategy to the new one
    }

    // Override this to add all tokens/tokenized positions this contract manages
    // on a *persistent* basis (e.g. not just for swapping back to want ephemerally)
    // NOTE: Do *not* include `want`, already included in `sweep` below
    //
    // Example:
    //
    //    function protectedTokens() internal override view returns (address[] memory) {
    //      address[] memory protected = new address[](3);
    //      protected[0] = tokenA;
    //      protected[1] = tokenB;
    //      protected[2] = tokenC;
    //      return protected;
    //    }
    function protectedTokens() internal view override returns (address[] memory) {}

    /**
     * @notice
     *  Provide an accurate conversion from `_amtInWei` (denominated in wei)
     *  to `want` (using the native decimal characteristics of `want`).
     * @dev
     *  Care must be taken when working with decimals to assure that the conversion
     *  is compatible. As an example:
     *
     *      given 1e17 wei (0.1 ETH) as input, and want is USDC (6 decimals),
     *      with USDC/ETH = 1800, this should give back 1800000000 (180 USDC)
     *
     * @param _amtInWei The amount (in wei/1e-18 ETH) to convert to `want`
     * @return The amount in `want` of `_amtInEth` converted to `want`
     **/
    function ethToWant(uint256 _amtInWei) public view virtual override returns (uint256) {
        // TODO create an accurate price oracle
        return _amtInWei;
    }
}
